# -*- coding: utf-8 -*-
"""e-health-pre-analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sJxgheoOEXCxqlLqgcus-naggsUS0Yfw
"""

import pandas as pd
data= pd.read_csv("dataset_project_eHealth20232024.csv")
phq = data.filter(['age', 'gender', 'education', 'marital', 'income', 'phq_1', 'phq_2', 'phq_3', 'phq_4', 'phq_5', 'phq_6', 'phq_7', 'phq_8', 'phq_9', 'phq_10', 'phq_11', 'phq_12', 'phq_13'])
phq

import pandas as pd
from sklearn.datasets import make_blobs
from sklearn.cluster import KMeans

kmeans = KMeans(n_clusters=3)

# drop row containing null values
phq = phq.dropna()
y = kmeans.fit_predict(phq[['age', 'gender', 'education', 'marital', 'income', "phq_1", "phq_2", "phq_3", "phq_4", "phq_5", "phq_6", "phq_7", "phq_8", "phq_9"]])
phq['Cluster'] = y
kmeans = KMeans(n_clusters=3)
y = kmeans.fit_predict(phq[['age', 'gender', 'education', 'marital', 'income', "phq_1", "phq_2", "phq_3", "phq_4", "phq_5", "phq_6", "phq_7", "phq_8", "phq_9"]])

phq['Cluster'] = y

print(phq)

cluster_0 = phq.loc[phq['Cluster'] == 0]
print(cluster_0)

print(cluster_0.mean())

print(cluster_0.min())

print(cluster_0.max())

len(cluster_0.index)

cluster_1 = phq.loc[phq['Cluster'] == 1]
print(cluster_1)

print(cluster_1.mean())

print(cluster_1.min())

print(cluster_1.max())

len(cluster_1.index)

cluster_2 = phq.loc[phq['Cluster'] == 2]
print(cluster_2)

print(cluster_2.mean())

print(cluster_2.min())

print(cluster_2.max())

len(cluster_2.index)

def find_majority(k):
    myMap = {}
    maximum = ( '', 0 ) # (occurring element, occurrences)
    for n in k:
        if n in myMap: myMap[n] += 1
        else: myMap[n] = 1

        # Keep track of maximum on the go
        if myMap[n] > maximum[1]: maximum = (n,myMap[n])

    return maximum

gender_0 = cluster_0['gender']
find_majority(gender_0)

marital_0 = cluster_0['marital']
find_majority(marital_0)

gender_1 = cluster_1['gender']
find_majority(gender_1)

marital_1 = cluster_1['marital']
find_majority(marital_1)

gender_2 = cluster_2['gender']
find_majority(gender_1)

marital_2 = cluster_2['marital']
find_majority(marital_2)